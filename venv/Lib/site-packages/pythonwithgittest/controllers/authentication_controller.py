# -*- coding: utf-8 -*-

"""
    pythonwithgittest.controllers.authentication_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..models.o_auth_response import OAuthResponse
from ..exceptions.api_exception import APIException

class AuthenticationController(BaseController):

    """A Controller to access Endpoints in the pythonwithgittest API."""


    def create_auth_token(self,
                          client_id,
                          client_secret,
                          grant_type):
        """Does a POST request to /oauth///token.

        Generate authentication token

        Args:
            client_id (string): TODO: type description here. Example: 
            client_secret (string): TODO: type description here. Example: 
            grant_type (string): TODO: type description here. Example:
                client_credentials

        Returns:
            OAuthResponse: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/oauth///token'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': grant_type
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('unsupported_grant_type', _context)
        elif _context.response.status_code == 401:
            raise APIException('invalid_client', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist', _context)
        elif _context.response.status_code == 503:
            raise APIException('The service requested is currently unavailable', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise APIException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, OAuthResponse.from_dictionary)
