# -*- coding: utf-8 -*-

"""
    pythonwithgittest.controllers.provisioning_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.o_auth_2 import OAuth2
from ..models.provision_number_response import ProvisionNumberResponse
from ..models.provision_number_response_3 import ProvisionNumberResponse3
from ..exceptions.api_exception import APIException

class ProvisioningController(BaseController):

    """A Controller to access Endpoints in the pythonwithgittest API."""


    def get_subscription(self):
        """Does a GET request to /messages/provisioning/subscriptions.

        Get mobile number subscription for an account

        Returns:
            ProvisionNumberResponse: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid access token. Please try with a valid token', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission   SpikeArrest-The API call rate limit has been exceeded', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist   RESOURCE-NOT-FOUND', _context)
        elif _context.response.status_code == 500:
            raise APIException('Technical error : Unable to route the message to a Target Endpoint : An error has occurred while processing your request, please refer to API Docs for summary on the issue', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise APIException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ProvisionNumberResponse.from_dictionary)

    def create_subscription(self,
                            body):
        """Does a POST request to /messages/provisioning/subscriptions.

        Provision a mobile number

        Args:
            body (ProvisionNumberRequest): A JSON payload containing the
                required attributes

        Returns:
            ProvisionNumberResponse3: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid access token. Please try with a valid token', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission   SpikeArrest-The API call rate limit has been exceeded', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist   RESOURCE-NOT-FOUND', _context)
        elif _context.response.status_code == 500:
            raise APIException('Technical error : Unable to route the message to a Target Endpoint : An error has occurred while processing your request, please refer to API Docs for summary on the issue', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise APIException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ProvisionNumberResponse3.from_dictionary)

    def delete_subscription(self,
                            body):
        """Does a DELETE request to /messages/provisioning/subscriptions.

        Delete a mobile number subscription from an account

        Args:
            body (DeleteNumberRequest): EmptyArr

        Returns:
            void: Response from the API. No Content

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages/provisioning/subscriptions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.delete(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid access token. Please try with a valid token', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission   SpikeArrest-The API call rate limit has been exceeded', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist   RESOURCE-NOT-FOUND', _context)
        elif _context.response.status_code == 500:
            raise APIException('Technical error : Unable to route the message to a Target Endpoint : An error has occurred while processing your request, please refer to API Docs for summary on the issue', _context)
        elif (_context.response.status_code < 200) or (_context.response.status_code > 208): 
            raise APIException('An internal error occurred when processing the request', _context)
        self.validate_response(_context)
